#!/usr/bin/env python3

import pcbfile4.pcbfile4 as pcbfile4
import pcbfile4.types as pcbfile4_types
import sys
from functools import total_ordering
import re

@total_ordering
class Component:
    designator = None
    pattern = None
    comment = None
    pattern_index = None

    def __init__(self, designator, pattern, comment):
        self.designator = designator
        self.pattern = pattern
        self.comment = comment
        self.pattern_index = self.get_pattern_index(pattern)

    def __str__(self):
        return "%s (%s): %s" % (self.designator, self.pattern, self.comment)

    # TBD: smarter ordering of alpha-numeric values (for example, C10 is before C2, and similar with comments)
    def __lt__(self, other):
        if self.pattern_index != other.pattern_index:
            return self.pattern_index < other.pattern_index

        if self.pattern != other.pattern:
            return self.pattern < other.pattern

        if self.comment != other.comment:
            return self.comment < other.comment

        if self.designator != other.designator:
            return self.designator < other.designator

        return False

    def get_pattern_index(self, pattern):
        # the lower the number, the higher will be this pattern in the list. unknown 
        # patterns get the highest index
        regexps = [
            # SMD components, from smallest to largest
            "^RC",
            "^SOT",
            "^MINIMELF",
            "^MELF",
            "^SMD",
            "^TQFP",
            "^SM.$",
            "^TANT",

            # THT components, from shortest to tallest
            "^Z$",
            "^AXIAL",
            "^DO",
            "^JACK",
            "^LED3$",
            "^DIP",
            "^TO",
            "^VR",
            "^LED5$",
            "^SIP",
            "^RAD",
            "^DCJACK",
            "^ARK",
            "^RB",
        ]

        idx = 0
        for regexp in regexps:
            if re.match(regexp, pattern):
                return idx
            idx = idx + 1

        return idx + 1

def load_pcb(argv):
    pcb = pcbfile4.PcbFile4()

    if len(argv) == 1:
        pcb.load_stdin()
    elif len(sys.argv) == 2:
        pcb.load_file(argv[1])
    else:
        sys.exit("Usage: pcb-bom <pcbfile.pcb> or pcb-bom < <pcbfile.pcb>")

    return pcb

def get_components(pcb):
    components = []
    for element in pcb.get_elements():
        if element.type == pcbfile4_types.ElementType.COMP:
            component = Component(element.designator.text, element.pattern, element.comment.text)
            components.append(component)

    components.sort()
    return components

def dump_bom(components):
    print("=== Bill Of Materials ===")

    idx = 1
    for component in components:
        print("%u. %s" % (idx, component))
        idx = idx + 1

pcb = load_pcb(sys.argv)
components = get_components(pcb)
dump_bom(components)
